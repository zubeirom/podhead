Set episode controller and get episode by channel
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch master
# Your branch is up to date with 'origin/master'.
#
# Changes to be committed:
#	modified:   src/episode/episode.controller.ts
#	modified:   src/episode/interfaces/episode-controller.interface.ts
#	new file:   web/app/controllers/channels/info.js
#	modified:   web/app/routes/channels/info.js
#	modified:   web/app/templates/channels/info.hbs
#
# ------------------------ >8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/src/episode/episode.controller.ts b/src/episode/episode.controller.ts
index 15534c4..d2c7e7d 100644
--- a/src/episode/episode.controller.ts
+++ b/src/episode/episode.controller.ts
@@ -1,7 +1,6 @@
 import {Body, Controller, Get, Param, Post, Query} from '@nestjs/common';
-import { IEpisodeController } from './interfaces/episode-controller.interface';
+import {EpisodeSerializer, IEpisodeController} from './interfaces/episode-controller.interface';
 import { EpisodeDto } from './interfaces/episode.dto';
-import { Episode } from './interfaces/episode.interface';
 import { EpisodeService } from './episode.service';
 
 @Controller('episodes')
@@ -16,12 +15,12 @@ export class EpisodeController implements IEpisodeController {
     }
 
     @Get("id")
-    getEpisode(@Param("id") episodeId: number): Promise<Episode> {
-        return this.episodeService.getEpisode(episodeId);
+    public async getEpisode(@Param("id") episodeId: number): Promise<EpisodeSerializer> {
+        return { episode: await this.episodeService.getEpisode(episodeId) };
     }
 
     @Get()
-    getEpisodes(@Query("cid") channelId: number): Promise<Episode[]> {
-        return this.episodeService.getEpisodes(channelId);
+    public async getEpisodes(@Query("cid") channelId: number): Promise<EpisodeSerializer> {
+        return { episodes: await this.episodeService.getEpisodes(channelId) };
     }
 }
diff --git a/src/episode/interfaces/episode-controller.interface.ts b/src/episode/interfaces/episode-controller.interface.ts
index 189c1fd..6cb63de 100644
--- a/src/episode/interfaces/episode-controller.interface.ts
+++ b/src/episode/interfaces/episode-controller.interface.ts
@@ -1,8 +1,14 @@
 import { Episode } from './episode.interface';
 import { EpisodeDto } from './episode.dto';
+import {Channel} from "../../channel/interfaces/channel.interface";
+
+export interface EpisodeSerializer {
+    episodes?: Episode[],
+    episode?: Episode
+}
 
 export interface IEpisodeController {
-    getEpisode(episodeId: number): Promise<Episode>,
-    getEpisodes(channelId: number): Promise<Episode[]>,
+    getEpisode(episodeId: number): Promise<EpisodeSerializer>,
+    getEpisodes(channelId: number): Promise<EpisodeSerializer>,
     createEpisode(body: EpisodeDto): Promise<void>,
 }
\ No newline at end of file
diff --git a/web/app/controllers/channels/info.js b/web/app/controllers/channels/info.js
new file mode 100644
index 0000000..40565d6
--- /dev/null
+++ b/web/app/controllers/channels/info.js
@@ -0,0 +1,17 @@
+import Controller from '@ember/controller';
+import { inject as service } from '@ember/service';
+import { task } from "ember-concurrency";
+import { set } from '@ember/object';
+
+export default class ChannelsIndexController extends Controller {
+    @service session;
+    @service currentUser;
+
+    @(task(function * () {
+        set(this, "account", yield this.currentUser.get())
+    })).on("init") getChannels;
+
+    episodes = null
+
+    account = null
+}
diff --git a/web/app/routes/channels/info.js b/web/app/routes/channels/info.js
index f7e6ff5..9a6ba73 100644
--- a/web/app/routes/channels/info.js
+++ b/web/app/routes/channels/info.js
@@ -1,4 +1,13 @@
 import Route from '@ember/routing/route';
+import { set } from '@ember/object';
 
 export default class ChannelsInfoRoute extends Route {
+
+    async afterModel(model) {
+        const res = await this.store.query('episode', {
+            cid: model.id
+        });
+        set(model, "episodes", res);
+    }
+
 }
diff --git a/web/app/templates/channels/info.hbs b/web/app/templates/channels/info.hbs
index e2147ca..1b2074d 100644
--- a/web/app/templates/channels/info.hbs
+++ b/web/app/templates/channels/info.hbs
@@ -1 +1,33 @@
+<LinkTo @route="channels" style="font-size: 11px">
+    Channel >
+</LinkTo>
+
+<h2 class="ui header">
+    <img class="ui rounded image" src={{this.model.channelImageUrl}}>
+    <div class="content">
+        {{this.model.channelName}}
+        <div class="sub header">{{this.account.username}}</div>
+    </div>
+</h2>
+
+<br>
+
+<button class="ui tiny black smalltext button">
+    <i class="plus icon" style="color: white"></i>
+    Add Episode
+</button>
+<div class="ui divider"></div>
+<br>
+
+
+
+
+
+
+<script >
+    function showLogin() {
+        $(".ui.mini.modal").modal('show');
+    }
+</script>
+
 {{outlet}}
\ No newline at end of file
